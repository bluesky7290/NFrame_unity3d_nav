<?xml version="1.0" encoding="utf-8"?>
<topic id="3D048EB4-7BD1-407a-9442-9DE60C82266E" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>

				<para>
				The input compile step involves gathering together all the resources needed to build the
				navigation mesh.  This may be as simple as compiling the source geometry into the correct
				format, or it may be very complex, such as gathering off-mesh connections, mapping triangle type
				to area, gathering custom processors, etc.
				</para>

				<para>
				The results of this step are the <token>InputGeometry</token>, <token>ProcessorSet</token>, 
				and <token>ConnectionSet</token> objects.  (Though finalization of the connection set can be delayed to a later step.)
				</para>
				
				<para>
				There is no standard implementation for compiling the input since the process is specific to the
				design environment.  In <token>Unity</token> the input is gathered from various project assets and scene objects,
				such as mesh filters.  In other environments it might be gathered directly from Maya or 3DSMax data.
				</para>
     
    </introduction>
		
		<section>
		
			<title>Input Geometry</title>
			
			<content>
		
				<para>
				The <token>InputGeometry</token> object consists of standard triangle mesh data (vertices and indices) with additional triangle area assignment. It is
				derived from the source geometry.
				</para>
				
				<para>
				The <codeEntityReference>T:org.critterai.nmbuild.InputGeometryCompiler</codeEntityReference> and
				<codeEntityReference>T:org.critterai.nmbuild.InputGeometryBuilder</codeEntityReference> classes are used
				to create the input geometry object.
				</para>
				
				<para>
				Each triangle in the input geometry is assigned an area based on surface type. Usually, triangles are assigned a default area,
				such as <codeEntityReference>F:org.critterai.nmgen.NMGen.MaxArea</codeEntityReference>, then special triangles
				are assigned special areas as needed.  For example, 'meadow' and 'sidewalk' triangles may be the default area, while
				'water' and 'swamp' triangles are assigned to other areas.  Assigning areas during the build process ensures that
				polygons are properly formed for each type of surface.
				</para>
		
				<code>
				
				// Example: Creating a simple input geometry object.
				
				// Where 'mesh' is a TriangleMesh object containing all of the input triangles.
				
				// Create an area buffer that assigns the default area id to all triangles.
				byte[] areas = NMGen.CreateDefaultAreaBuffer(mesh.triCount);
				
				// Create the builder.
				// All triangles with a slope over 45.5f will be re-assigned to NMGen.NullArea.
				InputGeometryBuilder gbuilder = InputGeometryBuilder.Create(mesh, areas, 45.5f);
				
				// Build in a single step.
				gbuilder.BuildAll();
			
				// Get the result.
				InputGeometry geom = gbuilder.Result;
				
				</code>
				
				<para>
				The <codeEntityReference>T:org.critterai.nmbuild.InputGeometryCompiler</codeEntityReference> class can be used to 
				combine multiple triangle meshes into a single triangle mesh, including area assignment.
				</para>
		
			</content>
		
		</section>
	
		<section>
		
			<title>ProcessorSet</title>
			
			<content>
		
				<para>
				The <token>ProcessorSet</token> contains <token>INMGenProcessor</token> objects used to add special behavior to the
				main build step. A processor may do something simple, such as applying default flags
				to all polygons (<codeEntityReference>T:org.critterai.nmbuild.ApplyPolygonFlags</codeEntityReference>), or something
				complex such as evaluating heightfield intermediates in order to auto-generate off-mesh connections.
				</para>
				
				<code>
				
				// Example: Creating a processor set.
				
				// There is a standard set of processors needed for almost every build.
				myProccessorList.Add(ProcessorSet.GetStandard(ProcessorSet.StandardOptions));
				
				// You can also add other processors, including custom processors of your own.
				myProccessorList.Add(myCustomProcessor);
				myProcessorList.Add(myOtherCustomProcessor);
				
				// Create the set.
				ProcessorSet processors = ProcessorSet.Create(myProcessorList.ToArray());
				
				</code>
				
				<para>How these processors are used is described further in <link xlink:href="FCD34CAE-02FA-48fd-891E-FB82EE360F49"/> topic.</para>
		
			</content>
		
		</section>
		
		<section>
		
			<title>ConnectionSet</title>
			
			<content>
		
				<para>
				The <token>ConnectionSet</token> defines the off-mesh connections that will be added to the navigation mesh.  In some cases
				they are fully defined during the input build process.  In other cases they are generated by custom processor's
				later in the build process.
				</para>
				
				<para>
				The <codeEntityReference>T:org.critterai.nmbuild.ConnectionSetCompiler</codeEntityReference> can be used to dynamically compile
				connections for eventual inclusion in the connection set.
				</para>
		
			</content>
		
		</section>

	<relatedTopics>
	
		<codeEntityReference>T:org.critterai.nmbuild.InputGeometry</codeEntityReference>
		<codeEntityReference>T:org.critterai.nmbuild.ProcessorSet</codeEntityReference>
		<codeEntityReference>T:org.critterai.nmbuild.ConnectionSet</codeEntityReference>
		<codeEntityReference>T:org.critterai.nmbuild.IncrementalBuilder</codeEntityReference>
	
		<link xlink:href="0b06b934-9f2b-43a3-a96b-6fd9dc8483c7"/> <!-- NMGen Intro -->
		<link xlink:href="FCD34CAE-02FA-48fd-891E-FB82EE360F49"/> <!-- Incremental Builder -->	
		<link xlink:href="ad1c623a-56b7-4aa6-921e-f2d67b39622a"/> <!-- Creating Navmesh -->	
		<link xlink:href="e76dda55-5f91-4c2a-bf8d-fa34de59e82b"/> <!-- Multi-Tile -->	
	
	</relatedTopics>

  </developerConceptualDocument>
</topic>